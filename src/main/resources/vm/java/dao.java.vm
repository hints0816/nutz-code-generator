package ${packageName}.dao;

#if($table.dynamic)
import org.nutz.dao.TableName;
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.nutz.dao.Dao;
import org.nutz.dao.Cnd;
import org.nutz.dao.pager.Pager;
import java.util.List;
import org.hints.nutz.domain.TablePageData;

import ${packageName}.domain.${ClassName};

/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
#set($tableParam="")
#set($tableParamSet="")
#set($tableParamClear="")
#if($table.dynamic)
#set($tableParam="String param, ")
#set($tableParamSet="TableName.set(param);\r\n")
#set($tableParamClear="TableName.clear();\r\n")
#end
#set($Param="")
#set($ParamCnd="Cnd.where")
#set($ParamCndDel="")
#if($table.comPkColumn.size() >= 2)
#foreach ($comPkColumn in $table.comPkColumn)
#set($Param=$Param+"${comPkColumn.javaType} ${comPkColumn.javaField}"+", ")
#set($ParamCnd=$ParamCnd+'("'+"${comPkColumn.javaField}"+'", "=", '+"${comPkColumn.javaField}"+").and")
#end
#set($Param=$Param.substring(0,$Param.lastIndexOf(',')))
#set($ParamCnd=$ParamCnd.substring(0,$ParamCnd.lastIndexOf('.and')))
#set($ParamCndDel=$ParamCnd)
#else
#set($Param="${pkColumn.javaType} ${pkColumn.javaField}")
#set($ParamCnd="${pkColumn.javaField}")
#set($ParamCndDel='Cnd.where("'+"${pkColumn.javaField}"+'", "=", '+"${pkColumn.javaField}"+")")
#end
@Repository
public class ${ClassName}Dao
{
    @Autowired
    private Dao dao;

    public ${ClassName} insert${ClassName}(${tableParam}${ClassName} ${className}){
        ${tableParamSet}${ClassName} insert = dao.insert(${className});${tableParamClear}
        return insert;
    }

    public int delete${ClassName}ById(${tableParam}${Param}){
        ${tableParamSet}int delete = dao.clear(${ClassName}.class, ${ParamCndDel});${tableParamClear}
        return delete;
    }

    public int delete${ClassName}ByIds(${tableParam}${pkColumn.javaType}[] ${pkColumn.javaField}s){
        ${tableParamSet}int delete = dao.clear(${ClassName}.class, Cnd.where("${pkColumn.javaField}", "in", ${pkColumn.javaField}s));${tableParamClear}
        return delete;
    }

    public int update${ClassName}(${tableParam}${ClassName} ${className}){
        ${tableParamSet}int update = dao.update(${className});${tableParamClear}
        return update;
    }

    public ${ClassName} select${ClassName}ById(${tableParam}${Param}){
        ${tableParamSet}${ClassName} fetch = dao.fetch(${ClassName}.class, ${ParamCnd});${tableParamClear}
        return fetch;
    }

    public TablePageData<${ClassName}> select${ClassName}List(${tableParam}${ClassName} ${className}){
        Pager pager = dao.createPager(${className}.getPageNum(), ${className}.getPageSize());
        ${className}.${className}NoPage();
        Cnd cnd = Cnd.from(dao,${className});
        ${tableParamSet}List<${ClassName}> query = dao.query(${ClassName}.class, cnd, pager);${tableParamClear}
        TablePageData<${ClassName}> tablePageData = new TablePageData(query, pager);
        return tablePageData;
    }
}
